# Load dataset
data <- read.csv('data.csv')
print(confusionMatrix(pred_knn, test$y_variable))
library(caret)
library(randomForest)
library(caret)
library(randomForest)
setwd("C:/Users/chole/OneDrive/Advanced BA/QMBE-3730/QMBE-3730")
# Load dataset
setwd("C:/Users/chole/OneDrive/Advanced BA/QMBE-3730/QMBE-3730")
loan_default_data_set <- read.csv("C:/Users/chole/OneDrive/Advanced BA/QMBE-3730/QMBE-3730/loan_default_data_set.csv", header=FALSE)
View(loan_default_data_set)
# Split dataset
set.seed(42)
trainIndex <- createDataPartition(data$y_variable, p=0.8, list=FALSE)
train <- data[trainIndex, ]
# Train and evaluate KNN
knn_model <- train(y_variable ~ ., data=train, method='knn', tuneLength=5) # Fit KNN model
# Load the dataset
data <- read.csv("yourfile.csv", header = FALSE)  # Read without headers
# Load dataset
setwd("C:/Users/chole/OneDrive/Advanced BA/QMBE-3730/QMBE-3730")
library(caret)
library(randomForest)
data <- read.csv("QMBE-3730.csv", header = FALSE)
data <- read.csv("QMBE-3730", header = FALSE)
# Remove the first row
data <- data[-1, ]
Loan_Default <- loan_default_data_set
# Split dataset
set.seed(42)
trainIndex <- createDataPartition(data$y_variable, p=0.8, list=FALSE)
# Split dataset
set.seed(42)
trainIndex <- createDataPartition(Loan_Default$y_variable, p=0.8, list=FALSE)
# Split dataset
set.seed(42)
trainIndex <- createDataPartition(Loan_Default$y_variable, p=0.8, list=FALSE)
Loan_Default <- loan_default_data_set
Loan_Default <- Loan_Default[-1, ]
# Split dataset
set.seed(42)
trainIndex <- createDataPartition(loan_default_data_set$y_variable, p=0.8, list=FALSE)
Loan_Default <- loan_default_data_set
loan_default_data_set <- loan_default_data_set[-1, ]
Loan_Default <- loan_default_data_set
View(Loan_Default)
View(Loan_Default)
View(loan_default_data_set)
set.seed(42)
trainIndex <- sample(1:nrow(Loan_Default), 0.8 * nrow(Loan_Default))
train <- Loan_Default[trainIndex, ]
test <- Loan_Default[-trainIndex, ]
# Train and evaluate KNN
knn_model <- train(y_variable ~ ., data=train, method='knn', tuneLength=5) # Fit KNN model
# Train and evaluate KNN
knn_model <- train(y_variable ~ ., loan_default_data_set=train, method='knn', tuneLength=5) # Fit KNN model
loan_default_data_set <- read.csv("C:/Users/chole/OneDrive/Advanced BA/QMBE-3730/QMBE-3730/loan_default_data_set.csv", header=FALSE)
View(loan_default_data_set)
# Train and evaluate KNN
knn_model <- train(rep_income ~ ., loan_default_data_set=train, method='knn', tuneLength=5) # Fit KNN model
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
# Get the shape of the dataset
num_rows <- nrow(Loan_Default)
num_cols <- ncol(Loan_Default)
cat("Dataset has", num_rows, "rows and", num_cols, "columns.\n")
# Check for missing values
missing_values <- colSums(is.na(Loan_Default))
cat("Missing values per column:\n")
print(missing_values[missing_values > 0])
# Get the shape of the dataset
num_rows <- nrow(Loan_Default)
# Check for missing values
missing_values <- colSums(is.na(Loan_Default))
cat("Missing values per column:\n")
print(missing_values[missing_values > 0])
# Verify no missing values remain
cat("Missing values after imputation:\n")
print(colSums(is.na(Loan_Default)))
# Check for duplicate rows
num_duplicates <- sum(duplicated(Loan_Default))
cat("Number of duplicate rows:", num_duplicates, "\n")
# Remove duplicate rows if any
Loan_Default <- Loan_Default %>% distinct()
# Plot two variables: avg_bal_cards vs. credit_card_age
ggplot(Loan_Default, aes(x = credit_card_age, y = avg_bal_cards)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Credit Card Age vs. Average Balance on Cards",
x = "Credit Card Age",
y = "Average Balance on Cards") +
theme_minimal()
# Plot two variables: avg_bal_cards vs. credit_card_age
ggplot(Loan_Default, aes(x = credit_age, y = avg_bal_cards)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Credit Card Age vs. Average Balance on Cards",
x = "Credit Card Age",
y = "Average Balance on Cards") +
theme_minimal()
# Plot two variables: avg_bal_cards vs. credit_card_age
ggplot(Loan_Default, aes(x = V3, y = avg_bal_cards)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Credit Card Age vs. Average Balance on Cards",
x = "Credit Card Age",
y = "Average Balance on Cards") +
theme_minimal()
# Plot two variables: avg_bal_cards vs. credit_card_age
ggplot(Loan_Default, aes(x = V3, y = V2)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Credit Card Age vs. Average Balance on Cards",
x = "Credit Card Age",
y = "Average Balance on Cards") +
theme_minimal()
# Plot distribution of a categorical variable: rep_education
ggplot(Loan_Default, aes(x = rep_education)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribution of Reported Education Levels",
x = "Education Level",
y = "Count") +
theme_minimal()
# Plot two variables: avg_bal_cards vs. credit_card_age
ggplot(Loan_Default, aes(x = V3, y = V2)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Credit Card Age vs. Average Balance on Cards",
x = "Credit Card Age",
y = "Average Balance on Cards") +
theme_minimal()
# Plot distribution of a categorical variable: rep_education
ggplot(Loan_Default, aes(x = V20)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribution of Reported Education Levels",
x = "Education Level",
y = "Count") +
theme_minimal()
